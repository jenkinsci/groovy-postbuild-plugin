<?jelly escape-by-default='true'?>
<l:ajax xmlns:j="jelly:core" xmlns:st="jelly:stapler" xmlns:d="jelly:define" xmlns:l="/lib/layout" xmlns:t="/lib/hudson" xmlns:f="/lib/form">
  <div>
      Executes a groovy script in the Jenkins JVM. Typically, the script checks some conditions and changes accordingly the build result, puts badges next to the build in the build history and/or displays information on the build summary page.
  <br/>The groovy script can use the variable <i>manager</i>, which provides access to the following objects and methods:
  <ul>
    <li><code>hudson</code> - the current Hudson instance (<a href="http://javadoc.jenkins-ci.org/?hudson/model/Hudson.html">javadoc</a>).</li>
    <li><code>build</code> - the current build (<a href="http://javadoc.jenkins-ci.org/?hudson/model/AbstractBuild.html">javadoc</a>).</li>
    <li><code>listener</code> - the build listener (<a href="http://javadoc.jenkins-ci.org/?hudson/model/BuildListener.html">javadoc</a>).</li>
    <P/>
    <li><code>contains(file, regexp)</code> - returns true if the given file contains a line matching <i>regexp</i>.</li>
    <li><code>logContains(regexp)</code> - returns true if the build log file contains a line matching <i>regexp</i>.</li>
    <li><code>getMatcher(file, regexp)</code> - returns a java.util.regex.Matcher for the first occurrence of <i>regexp</i> in the given file.</li>
    <li><code>getLogMatcher(regexp)</code> - returns a java.util.regex.Matcher for the first occurrence of <i>regexp</i> in the build log file.</li>
    <P/>
    <li><code>addShortText(text)</code> - puts a badge with a short text, using the default format.</li>
    <li><code>addShortText(text, color, background, border, borderColor)</code> - puts a badge with a short text, using the specified format.</li>
    <li><code>addBadge(icon, text)</code> - puts a badge with the given icon and text.</li>
    <li><code>addBadge(icon, text, link)</code> - puts a badge with the given icon and text linking to link.</li>
    <li><code>addInfoBadge(text)</code> - puts a badge with <img src="${rootURL}/plugin/groovy-postbuild/images/info.gif"/> info icon and the given text.</li>
    <li><code>addWarningBadge(text)</code> - puts a badge with <img src="${rootURL}/plugin/groovy-postbuild/images/warning.gif"/> warning icon and the given text.</li>
    <li><code>addErrorBadge(text)</code> - puts a badge with <img src="${rootURL}/plugin/groovy-postbuild/images/error.gif"/> error icon and the given text.</li>
    <P/>
    <li><code>createSummary(icon)</code> - creates an entry in the build summary page and returns a <i>summary</i> object corresponding to this entry. You can append text to the <i>summary</i> object by calling its <i>appendText</i> methods:
      <ul type="none">
    	<li>- <code>appendText(text, escapeHtml)</code></li>
    	<li>- <code>appendText(text, escapeHtml, bold, italic, color)</code></li>
      </ul>
    </li>
    <P/>
    <li><code>buildUnstable()</code> - sets the build result to <i>UNSTABLE</i>.</li>
    <li><code>buildFailure()</code> - sets the build result to <i>FAILURE</i>.</li>
    <li><code>buildSuccess()</code> - sets the build result to <i>SUCCESS</i>.</li>
    <li><code>buildAborted()</code> - sets the build result to <i>ABORTED</i>.</li>
    <li><code>buildNotBuilt()</code> - sets the build result to <i>NOT_BUILT</i>.</li>
  </ul>
  Example:<pre><code>    if(manager.logContains(".*uses or overrides a deprecated API.*")) {
      manager.addWarningBadge("Thou shalt not use deprecated methods.")
      manager.createSummary("warning.gif").appendText("&amp;lt;h1&amp;gt;You have been warned!&amp;lt;/h1&amp;gt;", false, false, false, "red")
      manager.buildUnstable()
    }</code></pre>
  See <a href="https://wiki.jenkins-ci.org/display/JENKINS/Groovy+Postbuild+Plugin">Jenkins Wiki</a> for more information.
</div>
</l:ajax>
